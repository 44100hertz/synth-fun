* Codebase
** output.c
  - Sample rate and bit depth specified
  - raw PCM file out for now...SDL output later
** gen.c
 - waveform generation functions. They do not require input.
 - unsigned data, double 0 to 1.0
 - the envelope is also a generator
** filt.c
 - filters do require input
 - unsigned data, double 0 to 1.0
 - LP and HP are buffered IIR filters
** instr.c
 - instruments that are made as needed by chaining together gen.c and filt.c
** note.c
 - musical input/output functions...chord generation, etc.
** main.c
 - makes a song, takes args
** parse.c
 - reads from text file and passes state info and data to main.c
* Song format
** General syntax
 - Commands are separated by semicolons. Newlines mean nothing.
** Fixed song properties
 - All songs have 8 playback channels
** Song header
 - defines BPM
 - defines tickRate. Typical tickRate is 8 or 12.
** In-song
*** Musical definitions
 - Music sequence:
   - defines a set of note offsets or other data
   - sXXX:[seq]
   - puts an amount of chars at position XXX (hex) of a 4kb block
   - chars 0-6 are note offsets representing scale positions
   - chars abcdefgABCDEFG are used much like scale
   - " " is note off
   - "-" is continue note
   - "." stops reading here
   - "!" loops back to a pXXX command
 - Scale
   - defines a set of notes in general at an index, is 7 long.
   - Each note is a letter corresonding with its note, capitals as sharps
   - defined as SX:[seq], e.g. S1:cdDfFGb
   - scales are assumed to ascend, fundamental is closest to middle C
*** Playback commands
 - Playing back in general
   - After song props are set, use a command:
   - ">" - play back everything for a beat
   - ".XXX" - play back for XXX many beats
 - Song
   - scale: kX, grabs scale from scale index
 - Channel
   - instrument: iXX (hex)
	 - picks from a number of predefined instruments.
   - pattern: pXXX (hex)
	 - picks a pattern range to play at BPM
   - fast pattern: tXXX (hex)
	 - picks a pattern to play at tick rate. This is added to pXXX.
